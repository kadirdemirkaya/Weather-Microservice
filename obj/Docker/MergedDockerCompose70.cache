name: dockercompose13092348111822341576
services:
  apigateway.api:
    build:
      context: C:\Users\Casper\Desktop\GitHub Projects\WeatherMicroservice
      dockerfile: src/ApiGateways/Api/ApiGateway.Api/Dockerfile
    container_name: apigateway-api
    environment:
      ASPNETCORE_ENVIRONMEN_STATE: Production
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionUrl: mongodb://mongo:27017/WeatherDbContext
      DatabaseName: WeatherDbContext
      TableName: Location
    image: apigatewayapi
    networks:
      backend: null
  consul:
    command:
    - agent
    - -dev
    - -client=0.0.0.0
    container_name: consul
    image: consul:1.9.7
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 8500
      published: "8500"
      protocol: tcp
    - mode: ingress
      target: 8600
      published: "8600"
      protocol: udp
  mongo:
    container_name: mongo-db
    environment:
      ASPNETCORE_ENVIRONMEN_STATE: Production
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionUrl: mongodb://mongo:27017/WeatherDbContext
      DatabaseName: WeatherDbContext
      TableName: Location
    image: mongo
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 27017
      published: "27017"
      protocol: tcp
    volumes:
    - type: volume
      source: mongodb_data
      target: /data/db
      volume: {}
  mssql:
    container_name: mssql
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: pa55w0rd!
    image: mcr.microsoft.com/mssql/server
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 1433
      published: "1433"
      protocol: tcp
    volumes:
    - type: volume
      source: mssql_data
      target: /var/opt/mssql
      volume: {}
  postgresql:
    container_name: postgresql
    environment:
      POSTGRES_DB: WeatherDbContex
      POSTGRES_PASSWORD: "123"
      POSTGRES_USER: postgresql
    image: postgres
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 5432
      published: "5432"
      protocol: tcp
    volumes:
    - type: volume
      source: postgresql_data
      target: /var/lib/postgresql/data
      volume: {}
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 5672
      published: "5672"
      protocol: tcp
    - mode: ingress
      target: 15672
      published: "15672"
      protocol: tcp
    volumes:
    - type: volume
      source: rabbitmq
      target: /var/lib/rabbitmq
      volume: {}
  redis:
    container_name: redis
    image: redis
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 6379
      published: "6379"
      protocol: tcp
    volumes:
    - type: volume
      source: redis_data
      target: /data
      volume: {}
  services.clientandserverservice.api:
    build:
      context: C:\Users\Casper\Desktop\GitHub Projects\WeatherMicroservice
      dockerfile: src/Services/ClientAndServerService/Services.ClientAndServerService.Api/Dockerfile
    container_name: clientandserver-api
    environment:
      ASPNETCORE_ENVIRONMEN_STATE: Production
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionUrl: mongodb://mongo:27017/WeatherDbContext
      DatabaseName: WeatherDbContext
      TableName: Location
    image: servicesclientandserverserviceapi
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 80
      published: "18005"
      protocol: tcp
  services.datacaptureservice.api:
    build:
      context: C:\Users\Casper\Desktop\GitHub Projects\WeatherMicroservice
      dockerfile: src/Services/DataCaptureService/Services.DataCaptureService.Api/Dockerfile
    container_name: datacapture-api
    environment:
      ASPNETCORE_ENVIRONMEN_STATE: Production
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionUrl: mongodb://mongo:27017/WeatherDbContext
      DatabaseName: WeatherDbContext
      TableName: Location
    image: servicesdatacaptureserviceapi
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 80
      published: "18006"
      protocol: tcp
  services.dataprocessservice.api:
    build:
      context: C:\Users\Casper\Desktop\GitHub Projects\WeatherMicroservice
      dockerfile: src/Services/DataProcessService/Services.DataProcessService.Api/Dockerfile
    container_name: dataprocess-api
    environment:
      ASPNETCORE_ENVIRONMEN_STATE: Production
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionUrl: mongodb://mongo:27017/WeatherDbContext
      DatabaseName: WeatherDbContext
      TableName: Location
    image: servicesdataprocessserviceapi
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 80
      published: "18007"
      protocol: tcp
  services.locationservice.api:
    build:
      context: C:\Users\Casper\Desktop\GitHub Projects\WeatherMicroservice
      dockerfile: src/Services/LocationService/Services.LocationService.Api/Dockerfile
    container_name: location-api
    environment:
      ASPNETCORE_ENVIRONMEN_STATE: Production
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: https://+:443;http://+:80
      ConnectionUrl: mongodb://mongo:27017/WeatherDbContext
      DatabaseName: WeatherDbContext
      TableName: Location
    image: serviceslocationserviceapi
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 80
      protocol: tcp
    - mode: ingress
      target: 80
      published: "18008"
      protocol: tcp
    - mode: ingress
      target: 443
      protocol: tcp
    volumes:
    - type: bind
      source: C:\Users\Casper\AppData\Roaming/Microsoft/UserSecrets
      target: /root/.microsoft/usersecrets
      read_only: true
      bind:
        create_host_path: true
    - type: bind
      source: C:\Users\Casper\AppData\Roaming/ASP.NET/Https
      target: /root/.aspnet/https
      read_only: true
      bind:
        create_host_path: true
  services.userinfoservice.api:
    build:
      context: C:\Users\Casper\Desktop\GitHub Projects\WeatherMicroservice
      dockerfile: src/Services/UserInfoService/Services.UserInfoService.Api/Dockerfile
    container_name: userinfo-api
    environment:
      ASPNETCORE_ENVIRONMEN_STATE: Production
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionUrl: mongodb://mongo:27017/WeatherDbContext
      DatabaseName: WeatherDbContext
      TableName: Location
    image: servicesuserinfoserviceapi
    networks:
      backend: null
    ports:
    - mode: ingress
      target: 80
      published: "18009"
      protocol: tcp
networks:
  backend:
    name: dockercompose13092348111822341576_backend
    driver: bridge
volumes:
  mongodb_data:
    name: dockercompose13092348111822341576_mongodb_data
  mssql_data:
    name: dockercompose13092348111822341576_mssql_data
  postgresql_data:
    name: dockercompose13092348111822341576_postgresql_data
  rabbitmq:
    name: dockercompose13092348111822341576_rabbitmq
  redis_data:
    name: dockercompose13092348111822341576_redis_data